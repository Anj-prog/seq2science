from snakemake.utils import validate


# complement the configuration
if not 'validated' in config:
    configfile: "config.yaml"
    validate(config, schema=f"../../schemas/config.schema.yaml")

# do onstart/onexit things
schema = 'alignment.schema.yaml'
include: f"{config['rule_dir']}/configuration.smk"


# load the 'subworkflow' download_fastq
include: "../download_fastq/Snakefile"


# load the remaining relevant rules
include: f"{config['rule_dir']}/get_genome.smk"
include: f"{config['rule_dir']}/alignment.smk"
include: f"{config['rule_dir']}/trim_auto.smk"
include: f"{config['rule_dir']}/qc.smk"


quality_control = []
for sample in samples.index:
    if config['layout'][sample] == 'SINGLE':
        quality_control.append(expand(f"{{result_dir}}/{{trimmed_dir}}/SE/{sample}_trimmed_fastqc.zip", **config))
        quality_control.append(expand(f"{{result_dir}}/{{trimmed_dir}}/SE/{sample}_fastqc.zip", **config))
    else:
        quality_control.append(expand(f"{{result_dir}}/{{trimmed_dir}}/PE/{sample}_{{fqext}}_trimmed_fastqc.zip", **config))
        quality_control.append(expand(f"{{result_dir}}/{{trimmed_dir}}/PE/{sample}_{{fqext}}_fastqc.zip", **config))


rule align_all:
    """
    align each sample against its assembly
    """
    input:
        [expand(f"{{result_dir}}/{{bwa_dir}}/{sample}-{samples.loc[sample]['assembly']}.bam", **config) for sample in samples.index],
        [expand(f"{{result_dir}}/{{bwa_dir}}/{sample}-{samples.loc[sample]['assembly']}.bai", **config) for sample in samples.index],
        quality_control

