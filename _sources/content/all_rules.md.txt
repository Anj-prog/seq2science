
# Per rule explanation

This is an automatically generated list of all supported rules, and their docstrings. At the start of each workflow 
run a list is printed of which rules will be run. And while the workflow is running it prints which rules are being started and finished. This page is here to give an explanation to the user about what each rule does, and for developers to find what is, and isn't yet supported.
####InsertSizeMetrics
```
Get the insert size metrics from a (paired-end) bam.
```

####MTNucRatioCalculator
```
Calculate the ratio mitochondrial dna in your sample.
```

####bam2cram
```
Convert bam to the more compressed cram format
```

####bam_bigwig
```
Convert a bam file into a bigwig file
```

####bam_stranded_bigwig
```
Convert a bam file into two bigwig files, one for each strand
```

####bedgraph_bigwig
```
Convert a bedgraph file into a bigwig.
```

####bedgraphish_to_bedgraph
```
Convert the bedgraph-ish file generated by genrich into true bedgraph file.
```

####blind_clustering
```
Create a sample distance matrix plot per assembly
```

####bowtie2_align
```
Align reads against a genome (index) with bowtie2, and pipe the output to the required sorter(s).
```

####bowtie2_index
```
Make a genome index for bowtie2.
```

####bwa_index
```
Make a genome index for bwa.
```

####bwa_mem
```
Align reads against a genome (index) with bwa, and pipe the output to the required sorter(s).
```

####call_peak_genrich
```
Call peaks with genrich based on the pileup.
```

####computeMatrix
```
computeMatrix scale-regions -S {input.bw} {params.labels} -R {params.annotation} -p {threads} -b 2000 -a 500 -o {output} > {log} 2>&1
```

####counts_matrix
```
#              htseq-count -f bam -r pos -m union {input.cts} {input.gtf} &> {log}
#              grep -v -- 'SAM\|GFF\|Warning' {log} > {output}
#              
```

####create_SNAP_object
```
Create a snapobject for each BAM file. 

These snapobjects can be merged later using snaptools in R.
```

####create_bins_SNAP_object
```
Add a Binned genome matrix with 5kb bins to the SNAPobject, after which it is renamed and moved
to the Snapfiles folder for downstream analysis in R using Snaptools
```

####cytoband
```
Generate a cytoband track for each assembly

source: http://genomewiki.ucsc.edu/index.php/Assembly_Hubs#Cytoband_Track
```

####decoy_transcripts
```
Generate decoy_transcripts.txt for Salmon indexing  

script source: https://github.com/COMBINE-lab/SalmonTools
```

####deseq2
```
Differential gene expression analysis with DESeq2.
```

####fastqc
```
Generate quality control report for fastq files.
```

####featureCounts
```
Use featureCounts to generate the fraction reads in peaks score (frips/assigned reads).
https://www.biostars.org/p/337872/
https://www.biostars.org/p/228636/
```

####gcPercent
```
Generate a gc content track

source: http://hgdownload.cse.ucsc.edu/goldenPath/hg19/gc5Base/
```

####genrich_pileup
```
Generate the pileup. We do this separately from peak-calling since these two processes have a very different
computational footprint.
```

####get_annotation
```
Matches the chromosome/scaffold names in annotation.gtf to those in the genome.fa.
```

####get_genome
```
Download a genome through genomepy.
Additionally downloads the gene annotation if required downstream.

If assemblies with the same name can be downloaded from multiple providers, 
a provider may be specified in the config (example: provider: NCBI). Otherwise,
each provider will be tried in turn, stopping at the first success.

Automatically turns on/off plugins.
```

####get_transcripts
```
Generate transcripts.fasta using gffread.

Requires genome.fa and annotation.gtf (with matching chromosome/scaffold names)
```

####hisat2_align
```
Align reads against a genome (index) with hisat2, and pipe the output to the required sorter(s).
```

####hisat2_index
```
Make a genome index for hisat2.
```

####hmmratac
```
Call 'peaks' with HMMRATAC.
```

####id2sra
```
Download the SRA of a sample by its unique identifier.

Tries first downloading with the faster ascp protocol, if that fails it falls back on the slower http protocol.
```

####idr
```
Combine replicates based on the irreproducible discovery rate (IDR). Can only handle two replicates, not
more, not less. For more than two replicates use fisher's method.
```

####keep_mates
```
Generate the 'genome info' that hmmratac requires for peak calling.
https://github.com/LiuLabUB/HMMRATAC/issues/17

TODO isnt this just .fa.sizes?
```

####linked_txome
```
Generate a linked transcriptome for tximeta

Also creates a symlink to the gtf in an Ensembl format (required by tximeta)

Required to converting salmon output (estimated transcript abundances) to gene counts
```

####macs2_callpeak
```
Call peaks using macs2.
Macs2 requires a genome size, which we estimate from the amount of unique kmers of the average read length.
```

####macs_bdgcmp
```
Prepare p-value files for rule macs_cmbreps
```

####macs_cmbreps
```
Combine replicates through Fisher's method

(Link original peakfile in replicate_processed if there is only 1 sample for a condition)
```

####mark_duplicates
```
Mark (but keep) all duplicate reads in a bam file with picard MarkDuplicates
```

####merge_replicates
```
Merge replicates (fastqs) simply by concatenating the files. We also change the name of the read headers to 
contain the name of the original replicate.

Must happen after trimming due to trim-galore's automatic adapter trimming method 

If a replicate has only 1 sample in it, simply move the file.
```

####multiBamSummary
```
multiBamSummary bins --bamfiles {input.bams} -out {output} {params} -p {threads} > {log} 2>&1
```

####multiqc
```
Aggregate all the quality control metrics for every sample into a single multiqc report.
```

####multiqc_header_info
```
Generate a multiqc header file with contact info and date of multiqc generation.
```

####multiqc_rename_buttons
```
Generate rename buttons.
```

####peak_bigpeak
```
Convert a narrowpeak file into a bignarrowpeak file.
https://genome-source.gi.ucsc.edu/gitlist/kent.git/tree/master/src/hg/lib/
```

####plotCorrelation
```
plotCorrelation --corData {input} --outFileCorMatrix {output} -c spearman -p heatmap > {log} 2>&1
```

####plotFingerprint
```
plotFingerprint -b {input.bams} {params} --outRawCounts {output} -p {threads} > {log} 2>&1 
```

####plotPCA
```
plotPCA --corData {input} --outFileNameData {output} > {log} 2>&1
```

####plotProfile
```
plotProfile -m {input} --outFileName {output.img} --outFileNameData {output.file} > {log} 2>&1
```

####renamefastq_PE
```
Create symlinks to fastqs with incorrect fqexts (default R1/R2).
Forward and reverse samples will be switched if forward/reverse names are not lexicographically ordered.
```

####salmon_decoy_aware_index
```
Make a decoy aware transcript index for Salmon.
```

####salmon_index
```
Make a transcriptomic index for Salmon.
```

####salmon_quant
```
Align reads against a transcriptome (index) with Salmon (mapping-based mode) and output a quantification file per sample.
```

####samtools_index
```
Create an index of a bam file which can be used for e.g. visualization.
```

####samtools_presort
```
Sort the result of alignment with the samtools sorter.
```

####samtools_sort
```
Sort the result of sieving with the samtools sorter.
```

####samtools_stats
```
Get general stats from bam files like percentage mapped.
```

####setup_blacklist
```
sortBed -faidx {input.sizes} -i {input.blacklist} |
complementBed -i /dev/stdin -g {input.sizes} > {output} 2> {log}
```

####sieve_bam
```
Sort the result of alignment or sieving with the sambamba sorter.
```

####softmask_track_1
```
Generate a track of all softmasked regions

source: https://github.com/Gaius-Augustus/MakeHub/blob/master/make_hub.py
```

####softmask_track_2
```
Generate a track of all softmasked regions

source: https://github.com/Gaius-Augustus/MakeHub/blob/master/make_hub.py
```

####sra2fastq_PE
```
Downloaded (raw) SRAs are converted to paired-end fastq files.
Forward and reverse samples will be switched if forward/reverse names are not lexicographically ordered.
```

####sra2fastq_SE
```
Downloaded (raw) SRAs are converted to single-end fastq files.
```

####star_align
```
Align reads against a genome (index) with STAR, and pipe the output to the required sorter(s).
```

####star_index
```
Make a genome index for STAR.

Troubleshooting:
1) sufficient disk space?
2) increase the RAM available (--limitGenomeGenerateRAM)
3) reduce the number of threads (snakemake -j 5)
4) reduce accuracy (--genomeSAsparseD 2)

For example, in your config.yaml, set aligner/quantifier:
aligner:
star:
index: --limitGenomeGenerateRAM 60000000000 --genomeSAsparseD 1
```

####star_quant
```
Quantify reads against a genome and transcriptome (index) with STAR and output a counts table per sample.
```

####trackhub
```
Generate a trackhub which has to be hosted on an internet accessible location, 
but can then be viewed through the UCSC genome browser.
```

####trackhub_index
```
Generate a searchable annotation & index for each assembly

source: https://genome.ucsc.edu/goldenPath/help/hubQuickStartSearch.html
```

####trim_galore_PE
```
Automated adapter detection, adapter trimming, and quality trimming through trim galore (paired-end).
```

####trim_galore_SE
```
Automated adapter detection, adapter trimming, and quality trimming through trim galore (single-end).
```

####twobit
```
Generate a 2bit file for each assembly
```

####txi_count_matrix
```
Convert estimated transcript abundances to gene count estimations and merge gene counts per assembly

Also outputs a single cell experiment object similar to ARMOR (https://github.com/csoneson/ARMOR)

Only works with Ensembl assemblies
```

